/*
 * $File: file_io.h.linux
 * $Date: Thu Oct 23 23:51:17 2014 +0800
 * $Author: jiakai <jia.kai66@gmail.com>
 */

#include "../common.h"
#include "../file/dbmeta.h"

namespace usql {

class FileIO {
    bool m_meta_modified = false;
    void *m_map_addr = nullptr;
    int m_fd;
    DBMeta m_meta;

    void sync_meta();

    public:
        class Page;

        FileIO(const FileIO&) = delete;
        FileIO& operator = (const FileIO&) = delete;

        FileIO(FileIO &&rhs) {
            *this = std::move(rhs);
        }

        void operator = (FileIO &&rhs);

        FileIO(const char *path, size_t default_page_size = 8192);
        ~FileIO();

        size_t page_size() const {
            return m_meta.page_size;
        }

        void extend_size(size_t tgt_nr_page);

        /*!
         * get one page, which must exist in this file
         */
        inline Page get_page(size_t pg_idx);

        const DBMeta& get_meta() const {
            return m_meta;
        }

        DBMeta& update_meta_start() {
            m_meta_modified = true;
            return m_meta;
        }

        void update_meta_finish() {
        }
};

class FileIO::Page {
    /*!
     * we could not cache the address here, since allocating new page may
     * invalidate old address
     */
    FileIO *m_fio;
    size_t m_offset;
    friend class FileIO;

    explicit Page(FileIO *fio, size_t offset):
        m_fio(fio), m_offset(offset)
    { }

    public:
        Page() = default;

        const void* read() const {
            return static_cast<uint8_t*>(m_fio->m_map_addr) + m_offset;
        }

        void* write() {
            return const_cast<void*>(read());
        }

        void reset() {
            m_fio = nullptr;
            m_offset = 0;
        }
};


FileIO::Page FileIO::get_page(size_t pg_idx) {
    usql_assert(pg_idx < m_meta.nr_page,
            "page index %zd exceeds limit(%zd)", pg_idx, m_meta.nr_page);
    return Page{this, pg_idx * m_meta.page_size};
}

}   // namespace usql

// vim: ft=cpp syntax=cpp.doxygen foldmethod=marker foldmarker=f{{{,f}}}

